name: Build and Push Docker Images
run-name: Docker Build and Push - ${{ github.ref_name }}

on:
  push:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        target: [cli, api, mcp, dev]

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set version
        id: version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=dev-$(git rev-parse --short HEAD)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Log in to Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=${{ matrix.target }}
            type=raw,value=${{ matrix.target }}-latest,enable={{is_default_branch}}

      # Build for all target platforms and push if on a tag and not a pull request
      - name: Build and push Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        id: build
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          target: ${{ matrix.target }}
          push: ${{ github.event_name != 'pull_request' && github.ref_type == 'tag' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=min
          build-args: DEPLOY_VERSION=${{ steps.version.outputs.version }}
    
      - name: Generate artifact attestation
        if: github.event_name != 'pull_request' && github.ref_type == 'tag'
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Logout from Docker Registry
        run: docker logout ${{ env.REGISTRY }}

  test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    strategy:
      matrix:
        target: [cli, api, mcp]

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Build test image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          target: ${{ matrix.target }}
          load: true
          tags: terraform-ingest:test-${{ matrix.target }}

      - name: Test CLI image
        if: matrix.target == 'cli'
        run: |
          docker run --rm terraform-ingest:test-cli --help
          docker run --rm terraform-ingest:test-cli --version

      - name: Test API image
        if: matrix.target == 'api'
        run: |
          docker run --rm terraform-ingest:test-api --help 2>&1 | grep -q "uvicorn"

      - name: Test MCP image
        if: matrix.target == 'mcp'
        run: |
          timeout 5 docker run --rm terraform-ingest:test-mcp || true

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    strategy:
      matrix:
        target: [cli, api, mcp]

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Build image for scanning
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          target: ${{ matrix.target }}
          load: true
          tags: terraform-ingest:scan-${{ matrix.target }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: terraform-ingest:scan-${{ matrix.target }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.target }}.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@17783bfb99b07f70fae080b654aed0c514057477 # codeql-bundle-v2.23.3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.target }}.sarif'
