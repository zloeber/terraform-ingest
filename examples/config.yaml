# Example configuration for terraform-ingest
# This file defines the repositories to ingest and processing options

repositories:
  # Example: AWS VPC Terraform module
  - url: https://github.com/terraform-aws-modules/terraform-aws-vpc
    name: terraform-aws-vpc
    branches:
      - main
      - master
    include_tags: true
    max_tags: 5
    path: .
    recursive: true
    exclude_paths:
      - "examples/*"
      - "test/*"

  # Example: AWS EC2 Terraform module
  - url: https://github.com/terraform-aws-modules/terraform-aws-ec2-instance
    name: terraform-aws-ec2
    branches:
      - main
      - develop
    include_tags: true
    max_tags: 3
    path: .
    exclude_paths: []

# Output directory for JSON summaries
output_dir: ./output

# Directory for cloning repositories
clone_dir: ./repos

# MCP (Model Context Protocol) service configuration
mcp:
  auto_ingest: true               # Enable automatic ingestion when MCP server starts
  ingest_on_startup: true         # Run ingestion immediately on startup  
  refresh_interval_hours: 6       # Auto-refresh every 6 hours (null to disable)
  config_file: config.yaml        # Configuration file to use for auto-ingestion
  
  # Optional: Custom prompts accessible via the get_custom_prompts tool and prompt:// resources
  custom_prompts:
    aws_best_practices: |
      AWS Terraform best practices:
      1. Use VPCs for network isolation
      2. Enable MFA for sensitive operations
      3. Use Systems Manager for secrets management
      4. Implement proper IAM roles and policies
      5. Enable CloudTrail for audit logging
      6. Use auto-scaling for availability
    module_review_checklist: |
      When reviewing a Terraform module:
      1. Check that all variables have descriptions
      2. Verify outputs are well documented
      3. Ensure error handling is present
      4. Validate that resources have appropriate tags
      5. Review security group rules for over-permissiveness
      6. Check for hardcoded values that should be variables
