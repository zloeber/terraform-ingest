[project]
name = "terraform-ingest"
dynamic = ["version"]
requires-python = ">=3.12"
dependencies = [
    "click>=8.3.0",
    "fastapi>=0.119.0",
    "fastmcp>=0.5.0",
    "gitpython>=3.1.45",
    "httpx>=0.28.1",
    "loguru>=0.7.3",
    "packaging>=24.0",
    "pydantic>=2.12.2",
    "python-hcl2>=7.3.1",
    "pyyaml>=6.0.3",
    "urllib3>=2.5.0",
    "uvicorn>=0.37.0",
]
authors = [
    {name = "Zachary Loeber", email = "zloeber@gmail.com"}
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
]
description = "A terraform multi-repo module AI RAG ingestion engine that accepts a YAML file of terraform git repository sources, downloads them locally using existing credentials, creates JSON summaries of their purpose, inputs, outputs, and providers on the main and git tag branches for ingestion via a RAG pipeline into a vector database."
readme = "README.md"
#license-files = ["LICENSE"]

[dependency-groups]
dev = [
    "black>=25.9.0",
    "flake8>=7.3.0",
    "mypy>=1.18.2",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
]

[tool.hatch.version]
source = "vcs"
fallback-version = "0.0.1"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.hooks.vcs]
version-file = "src/terraform_ingest/_version.py"

[project.scripts]
terraform-ingest = "terraform_ingest.cli:main"
terraform-ingest-mcp = "terraform_ingest.mcp_service:main"

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project.optional-dependencies]
standard = []
test = ["pytest", "pytest-cov", "mypy", "ruff", "httpx", "pytest-asyncio", "black"]
dev = ["ruff", "black", "isort", "mypy"]
docs = ["mkdocs", "mkdocs-material", "mkdocstrings", "mkdocs-click", "mdtoc", "mkdocs-mermaid2-plugin", "mkdocs-material", "mkdocs-llmstxt"]
lint = ["ruff", "black", "isort", "mypy"]
format = ["black", "isort"]
typecheck = ["mypy"]
embeddings = ["chromadb>=1.2.1", "sentence-transformers>=5.1.2", "openai>=1.0.0", "voyageai>=0.2.0"]

[tool.semantic_release]
assets = []
build_command_env = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = false
repo_dir = "."
no_git_verify = false
tag_format = "{version}"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
changelog_file = ""
exclude_commit_patterns = []
mode = "update"
insertion_flag = "<!-- version list -->"
template_dir = "templates"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"
mask_initial_release = true

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
other_allowed_tags = ["build", "chore", "ci", "docs", "style", "refactor", "test"]
allowed_tags = ["feat", "fix", "perf", "build", "chore", "ci", "docs", "style", "refactor", "test"]
default_bump_level = 0
parse_squash_commits = true
ignore_merge_commits = true

[tool.semantic_release.remote]
name = "origin"
#token = "<TOKEN>"
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

